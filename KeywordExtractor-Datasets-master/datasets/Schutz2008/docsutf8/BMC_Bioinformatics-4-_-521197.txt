BMC Bioinformatics
BMC Bioinformatics
1471-2105
BioMed Central
London


521197
1471-2105-4-21
12783628
10.1186/1471-2105-4-21
Research Article


EasyGene – a prokaryotic gene finder that ranks ORFs by statistical significance

Larsen
Thomas Schou

1
2
thsl@novozymes.com

Krogh
Anders

1
3
krogh@binf.ku.dk


1
Center for Biological Sequence Analysis BioCentrum, Technical University of Denmark Building 208, 2800 Lyngby, Denmark
2
Present address: Novozymes A/S, Novo Alle, 1B1.01,2800 Bagsvaerd, Denmark
3
Present address: The Bioinformatics Centre, University of Copenhagen Universitetsparken 15, 2100 Copenhagen, Denmark
2003

3
6
2003

4
21
21

25
11
2002

3
6
2003


Copyright © 2003 Larsen and Krogh; licensee BioMed Central Ltd. This is an Open Access article: verbatim copying and redistribution of this article are permitted in all media for any purpose, provided this notice is preserved along with the article's original URL.
2003
Larsen and Krogh; licensee BioMed Central Ltd. This is an Open Access article: verbatim copying and redistribution of this article are permitted in all media for any purpose, provided this notice is preserved along with the article's original URL.

Background
Contrary to other areas of sequence analysis, a measure of statistical significance of a putative gene has not been devised to help in discriminating real genes from the masses of random Open Reading Frames (ORFs) in prokaryotic genomes. Therefore, many genomes have too many short ORFs annotated as genes.

Results
In this paper, we present a new automated gene-finding method, EasyGene, which estimates the statistical significance of a predicted gene. The gene finder is based on a hidden Markov model (HMM) that is automatically estimated for a new genome. Using extensions of similarities in Swiss-Prot, a high quality training set of genes is automatically extracted from the genome and used to estimate the HMM. Putative genes are then scored with the HMM, and based on score and length of an ORF, the statistical significance is calculated. The measure of statistical significance for an ORF is the expected number of ORFs in one megabase of random sequence at the same significance level or better, where the random sequence has the same statistics as the genome in the sense of a third order Markov chain.

Conclusions

.


computational gene finding
statistical significance
hidden Markov model
short open reading frames
automated genome annotation



Background
1
] that 60–80% of the genes in newly sequenced organisms have known homologues in other species. This percentage will grow as genomic annotations progress and perhaps there will be a time when virtually all genes can be found by homology matches to known proteins. That day, however, is not around the corner and even if it were, the occasional odd genes which would nevertheless escape detection by homology may very well be the truely novel and most wanted ones.
2
A. pernix 
3
2
statistical significance 
for an ORF being a gene.
4
6
7
E. coli
8
9
1
], appeared the same year and calculates coding potentials of ORFs based on codon frequency of similarity-derived genes. Most of these gene finders also extract Shine-Dalgarno sequences in order to improve prediction of start codons.
10
11
12
13
]. GeneMarkS uses a mixture of Markov chains of order 0, 1 and 2 in combination with features of already annotated genomes to bootstrap an initial estimation of coding statistics, which is then iteratively improved by the GeneMark.hmm2.1 algorithm. Gibbs sampling is also used to detect Ribosome Binding Sites (RBS). The Frame-by-Frame method was conceived to improve the accuracy of GeneMark.hmm and it employs standard Viterbi parsing of all six reading frames independently and subsequently combines these into a global parse.
In this paper, we describe a fully automated method for making an organism specific gene finder. It starts from a raw genome and searches for protein matches to get a good training set. Then an HMM with states for coding regions as well as RBS is estimated from the data set. This HMM is used to score all the ORFs in the genome and finally the score is converted to a measure of significance – R – which is the expected number of ORFs that would be predicted in one megabase of random DNA. The main advantage of this significance measure is that it takes the length distribution of random ORFs properly into account. The method is shown to match or exceed other gene finders currently available.

Methods
Automatic extraction of training set
1
]. All ORFs with a significant match to a protein from a different organism are assumed to be real genes. A subset of those have only one possible start codon, because there is only one start between the most upstream protein match and the nearest upstream in-frame stop codon. The details of the method are:
1. Extract the maximal ORFs longer than 120 bases from the query-genome. For every stop codon, extract the region from the first downstream (in frame) start codon to the next downstream (in frame) stop codon.
14
-5 
15
excluding 
proteins from the query-genome and proteins listed with one or more of the keywords putative, unknown, possible, hypothetical, probable, bacteriophage, transposon, insertion, reverse transcriptase.
A
B
' of certain genes with uncertain starts.
A
16
A
.
A
B
T
T
T 
.
6. Add 50 bases of upstream flank to genes of all sets and 10 bases downstream flank.
A 
T 
make out reliable and balanced sets of positive examples which may be used to estimate the model parameters.

HMM architecture
17
19
]. We model standard 'text book genes' with an unbroken open reading frame, i.e. genes with no programmed frame shifts, no sequencing errors nor any other special feature obstructing the reading frame.
1
B 
E 
not 
13
]. Similarly we model the last codon before the stop codon explicitly and 6 bases after the stop in order to capture information present around the stop codon.
Figure 1
The overall HMM architecture. 
Each box corresponds to a submodel with more than one state. The number above the boxes indicates the number of bases modelled by the submodel. An 'X' indicates a variable number.



2
17
20
tied
).
Figure 2
Enlargement of null model and internal looped codons. 
LEFT: The state structure of the NULL model. The background state is of third order and models the general composition of the genome. The three shadow states model coding regions on the complementary strand. There are transitions from the background state to the first RBS state and to the first state modelling the start codon. RIGHT: Details of model of internal codons. A codon is modelled by three states with a transition from the last state back to the first and one out of the codon model. By putting several codon models in series, the length distribution of coding regions can be captured. From the last state there is a transition to the first state of the 'BSTOP' model, which models the last codon before the stop codon.



3
21
]. These spacer states are of order zero.
Figure 3
The state structure of the RBS model. 
The RBS model consists of seven states for modelling the ribosome binding site followed by a set of tied states for the variable region between the RBS and the start codon. From the last state there is a transition to the first of the three states modelling the start codon.



2
 has a third order state for capturing intergenic regions and a reverse codon model for modelling reverse genes ('shadows') with states of second order. Note that transitions are allowed directly from the null model to a start codon; this facilitates detection of genes inside operons which may not have a clear RBS.
22
].

Model estimation
17
]. The estimation is done in these stages:
1. The emission probabilities of the background state are estimated from both strands of the complete genome.
2. The genes from start to stop codons are extracted from the training set and reverse complemented. The shadow model (consisting of three states) is estimated from these sequences. The parameters of this model are fixed.
1
A 
A
23
A
, the parameters of the RBS, start and astart models are fixed.
T 
.
The whole procedure can be completely automated. Note that no experimentally mapped RBSs are used for estimating the RBS model, the RBS is discovered during the estimation procedure.
17
20
T 
where the exact start is not known, we leave the part of the sequence from the most upstream start codon until the first significant protein match unlabelled. The weight with which each base in the unlabelled region contributes to the estimation of the parameters in the coding states is automatically determined during the iterative estimation procedure.

Decoding
decoding 
we mean the process of finding an optimal parse of the DNA string into coding and non-coding regions.
17
i
S
S 
i 
24
17
]. We use this to calculate the posterior probability of the first state of the start codon model, and thus obtain the probability that a gene starts at any position in the sequence. Given our assumption of perfect 'textbook-genes' with no errors or frame shifts, there is exactly one stop codon for each start, and thus the probability of a gene start is equal to the probability of the whole gene. The independent scoring of start codons makes it trivial to report several possible start codons for a gene in cases where there is no clear "winner".
1
8
].
The state posterior probability itself is not a useful score, because it is a probability of the whole sequence, not just a single gene, and it therefore depends on the length of the sequence it is part of. By dividing the posterior probability by the probability of the whole sequence (the genome) according to the null model, the contribution to the state posterior probability of the sequences flanking a gene will cancel and effectively make the ratio independent of the flanking sequences (except the parts very close to the gene), see the Appendix. The log of this ratio is called the log-odds score, and that is our basic score for a gene.

Significance
As mentioned above, it is important to take into account the chance that a random ORF of the same length scores as high as a given gene. This is implicitly taken into account by our HMM because it models the length distribution of genes, but it turns out that one can calculate a significance score, which works slightly better (se results) and has a more intuitive interpretation.
l
' can be written as
N
l
A 
Bl
'),     (1)
A 
B 
l
l
0 
l
0 
l
l 
l
0
.
n 
l
n
μ 
μ 
l
σ 
σ 
l
l
n 
standard score



which is normally distributed with mean 0 and variance 1.
l
C
l
', Γ) of ORFs of the same length scoring higher than Γ in a fixed (long) random sequence using equation (1),
C
l
A 
Bl
') [1 - Φ (Γ)],     (3)
l 
C
l
', Γ) to judge significance, we use the total number of expected predictions in a random sequence.
l
1 
1
C 
C

1
all 
C
l
C

C 
l
C 

C 
l
C 

(a sum of a geometric series). We end up with the following expression for the total number of predicted genes in a random sequence:


C
A 
B 
characterize the random sequence.
R 
C
4
R
-value).
Figure 4
R
l
'. 
E. coli 
runs described in Results and Discussion, but the qualitative behavior is independent of the genome



R 
to a random sequence of 1 Mb rather than a random sequence the length of the genome, because then significance can be compared across genomes. The precise recipe we use for calculation of statistical significance is:
A 
B 
by linear regression of the log of the number of ORFs against the length and normalize to 1 Mb. To avoid distortion of regression lines due to noisy statistics of long ORFs, restrict the variable ORF length used to lie below 70 codons. This makes the range of variable length 16–70 codons, which corresponds to a total length range of 20–74 codons.
μ
μ
σ
σ 
by linear regression, again using ORFs in the range 20–74 codons.
C 
R 
using equation 4.
R 
R 
with the size of the genome measured in megabases.

Using other gene finders
In order to benchmark EasyGene we compare it with some of the existing gene finders.
GeneMark 2.4, Frame-by-Frame, GeneMark.hmm 2.1 and GeneMark.hmm/S all belong to the GeneMark suit of programs and are accessible via the web interfaces listed in the references.
For GeneMark.hmm2.1, GeneMark.hmm/S and Frame-by-Frame the output is a coordinate listing (start and stop positions) of all predicted genes.
GeneMark2.4 outputs a list of stop codons and corresponding high-scoring start codons. Each start/stop is listed with scores for coding potential and RBS. We collect all starts for a given stop and output the "Avg Prob" of the start with the highest RBS score. Whenever a threshold was needed for comparison purposes, we used 0.5 which is the default set on the web page.
Glimmer2.02 and Orpheus2 were installed locally. We changed the minimum ORF length predicted by these gene finders to 60 bp which seems to be the minimum used by the other gene finders. Orpheus and Glimmer provide two kinds of output: a verbose coordinate list of starts, stops and ORF scores and a simpler, post-processed list of coordinates for ORFs regarded as genes.
In order to test their ORF scoring we had to parse the scored output. We had some difficulties interpreting the scored Orpheus output since some ORFs were scored several times with identical results (several identical "Start chosen"). In cases where multiple copies were found, we simply chose one of them and used the corresponding "Coding potential" (with the recommended threshold of -1) for further analysis.
For Glimmer2.02 the scored output was parsed simply by selecting the Gene Score attributed to every scored ORF and using the recommended threshold of 90.
25
] for an alternative post-processing of Glimmer2.02 output. RBSfinder is designed to look for RBS sequences upstream of genes predicted by Glimmer2.02. If there are no RBS patterns in this region, RBSfinder searches for a start codon having a RBS pattern in the same reading frame upstream or downstream and relocates the start codon accordingly. The program may be iterated several times using revised predictions as new inputs. We found that running it twice was better than once but running it three times did not improve things further, so we chose to run it twice (with default options).


Results and Discussion
5
 for an example.
Figure 5
Gene length distribution imposed by HMM architecture. 
n 
A 
H. pylori 
J99.



6
7
performance 
curves (ROC curves) for varying numbers of branches and various orders. The performance curves are made by plotting the average true positive rates for a range of average false positive rates (the fraction of false positives made on average by the 10 different cross-validation models in 1 Mb of random sequence).
Figure 6
Assessing the optimal number of HMM coding branches. 
E. coli
R
T 
R
T 
R 
R 
(false positive rate). The resulting 10 files with true and false positive rates are concatenated and 30 false positive cutoffs are selected (from 0 to 0.15 with steps of 0.005). The false positive entries in the 10 files which fall between these cutoffs are found and the corresponding true positive entries are averaged. Hence for each average false positive rate (halfway between two consecutive false positive cutoffs) we associate an average true positive rate and these tuples are then plotted.



Figure 7
Assessing the optimal order of looped codon states. 
E. coli
6
.



6
7
E. coli
, a choice of 3 branches of 4th order states as default models of the internal parts of genes works well for the organisms we tested.
8
 shows performance curves to compare log-odds and significance scores and the significance scoring is seen to be slightly better in that it allows detection of more true positives for a given false positive rate. The significance scoring has the additional advantage of being genome independent and has an intuitively appealing interpretation.
Figure 8
Comparing significance and log-odds. 
E. coli
6
.



1
R
E. coli 
R 
6
7
8
.
Table 1
R
-values.

R
-value
TP rate
FP rate


0.1
0.971
0

2
0.980
2.3e-6

10
0.984
3.0e-5

50
0.987
3.1e-4

150
0.991
8.7e-4

500
0.995
2.8e-3

10000
0.999
0.059



R
E. coli 
R
R
-value


E. coli 
9
R 
10
11
R 
are quite accurate.
Figure 9
Statistical characteristics of random sequences. 
E. coli 
model). Lowest subplot shows a logarithmic plot of the length distribution of random ORFs. The linear regression lines are shown in all three plots.



Figure 10
Comparing predicted and found number of false positives. 
E. coli 
model.



Figure 11
Probability density functions for the standard score. 
E. coli 
model). The lower plot is an enlargement of the distribution tail.



2
E. coli 
as well as the number of genes found in the whole genome and in random sequences. The eight gene finders are: EasyGene, Glimmer2.02, Glimmer2.02 with RBSfinder post-processing, Orpheus, GeneMark2.4, GeneMark.hmm2.1/GeneMarkS hybrid, "pure" GeneMark.hmm2.1 and Frame-by-Frame.
Table 2
E. coli
.

Data set
EasyGene
Glim
rbs-Glim
Orpheus
Gm24
GmS
Gmhmm
Frame


A'-% found
98.4
98.9/98.9
98.9
98.0/95.3
91.5
97.2
98.1
97.0

A'-% exact
93.8
98.9/95.3
84.1
95.1/92.4
41.6
88.0
85.7
93.2

B'-% found
98.4
98.5/98.6
98.6
95.9/96.5
90.2
96.6
97.2
96.4

T-% found
98.1(98.0)
98.3/98.4
98.4
96.5/95.6
89.8
96.3
97.1
96.1

Genome
4145
6827/5756
5756
9333/7543
3552
4064
4230
4064




zero order
7
169/211
211
6761/5430
6
153
1459
0

first order
7
545/723
723
6836/4804
13
241
830
0

third order
1
2423/2694
2694
6582/4817
43
659
866
1

shadows
0
19/21
21
22/9
1
0
2
0



E. coli
E. coli
. The lower part of the table shows the number of false positives predicted in random sequences generated by Markov chains of order 0, 1 and 3 and the very last row shows the number of false predictions in the shadows of the high-confidence genes in data set A. All values listed for EasyGene are based on an R-value threshold of R = 2.


A
E. coli 
A 
B
T 
A
B
' (2042 sequences).
Genome 
E. coli 
E. coli 
A
A
' where, ideally, no genes (or at least very few) should be predicted.
T 
T 
.
orfnuc 
file. The post-processing removes some overlaps but also appears to employ a less restrictive cutoff than the recommended -1. For Glimmer, N1 is the number of ORFs with Gene Scores greater than or equal to the recommended threshold of 90 and N2 is the number of entries in the post-processed list of putative genes. The post-processing elects ("votes") some ORFs as gene candidates despite a low score. On the other hand the post-procesing removes some same-strand overlaps in different reading frames so the N2 may be greater or less than N1 depending on the relative extent of overlaps and "voting".
It is always difficult to asses the specificity of a gene finder, because it is difficult to find genomic regions that are certain to contain no genes. We have therefore assessed specificity in three different ways. First, by counting the number of predicted genes in a genome. If this number is much higher than the number of annotated genes, it is likely that there are many false positive predictions, i.e. poor specificity. Our second test is based on random sequence. Clearly, a high number of predicted genes in a random sequence of bases indicates a poor specificity. However, it is probably not possible to find an exact quantitative correspondence between predictions in random sequences and real genomes. Also, it is not clear what sort of random sequence to use for such a test. By 0'th order we mean a sequence with bases generated randomly and independently with the base frequencies of the genome. Bases are quite correlated in DNA sequences, so we have also tested on sequences that are generated by Markov chains of orders 1 and 3. These Markov chains are estimated from the genome, so the sequences will have the same distribution of dinucleotides and 4-nucleotides, respectively, as the genome. Finally, the third test is the number of genes predicted on the opposite strand of genes (shadows); these shadow regions should contain very few genes if any.
All gene finders except EasyGene, Frame and GeneMark2.4 predict a rather large number of false positives in random sequences, but for GeneMark.hmm and GeneMarkS we do not see large over-prediction in the genome or in shadows. Evidently, Glimmer and Orpheus predict a lot more genes in the genome than the other gene finders, suggesting that these gene finders have very high false positive levels. This is supported by the high numbers of genes predicted in random sequences, and (to a much lesser extent) in shadows. Orpheus and Glimmer actually predict more genes pr. nucleotide in the third order random sequence than they do in the genome, suggesting that the coding potential calculated in these gene finders is far from optimal.
The HMM used by Frame assumes a minimum gene length of 69 bases which could make its false positive level seem somewhat better (lower) than it is, but there was no convenient way to lower the minimum length so we simply left it. It should also be noted that Frame relies on pre-existing annotations for training and is therefore not a self-training gene finder like Glimmer, Orpheus, GeneMarkS and Easygene.
The sensitivity of the gene finders is tested on sets of high-confidence genes. Glimmer has the highest sensitivity for all sets, but this is largely due to heavy over-prediction. One ought always to bear in mind that it is not difficult to achieve high sensitivity if high levels of false predictions are tolerated at the same time – sensitivity is 100% if all ORFs are predicted as genes! Although there are some very close competitors, EasyGene comes out as the second best in sensitivity for all sets.
A
A 
is biased, because all genes of this set are LPORFs. Glimmer always predicts the most upstream start and consequently achieves a high performance on this set. When Glimmer's output is post-processed by RBSfinder the performance drops considerably.
E. coli 
26
3
3
27
25
] on the Glimmer predictions improves performance on set LiD to 75.8%, but at the cost of a substantial dip in set LiC performance to 88.7%.
Table 3
E. coli 
genes.

Data set
EasyGene
Glim
rbs-Glim
Orpheus
Gm24
GmS
Gmhmm
Frame


LiC-% found
100
100/100
100
97.7/91.7
97.7
100
100
100

LiC-% exact
94.0
100/97.0
88.7
96.2/90.2
49.6
94.0
90.2
98.5

LiD-% found
100
100/100
100
96.8/98.4
100
100
100
100

LiD-% exact
96.8
0/1.6
75.8
51.5/51.6
67.7
95.2
80.6
87.0



26
]. All values listed for EasyGene are based on an R-value threshold of R = 2.


E. coli 
2
3
M. tuberculosis 
28
H. pylori 
29
B. subtilis 
30
M. tuberculosis 
H. pylori 
B. subtilis 
11
4
2
.
Table 4
M. tuberculosis
H. pylori J99 
B. subtilis
.

M. tuberculosis


Data set
EasyGene
GmS
Frame


A'-% found
96.7
97.2
96.0

A'-% exact
89.1
80.9
87.9

B'-% found
96.8
97.1
96.3

T-% found
96.9(96.6)
97.3
96.4

Genome
3749
3983
4341




zero order
0
-
8

first order
3
-
2

third order
2
-
12

shadows
1
0
1




H. pylori J99





Data set
EasyGene
GmS
Frame




A'-% found
99.2
99.2
99.2

A'-% exact
97.5
95.7
96.7

B'-% found
100
99.6
98.9

T-% found
99.7(98.8)
99.5
99.1

Genome
1491
1518
1479




zero order
2
1479
2

first order
1
336
2

third order
0
403
0

shadows
2
0
0




B. subtilis





Data set
EasyGene
GmS
Frame




A'-% found
99.3
98.1
98.8

A'-% exacts
94.8
94.1
93.3

B'-% found
99.2
99.0
98.2

T-% found
99.3(99.2)
99.0
98.4

Genome
4083
4221
4006




zero order
1
675
0

first order
2
457
0

third order
1
813
2

shadows
0
0
0



M. tuberculosis
H. pylori J99 
B. subtilis
M. tuberculosis
, so it was not possible to obtain a false positive estimate for this organism. All values listed for EasyGene are based on an R-value threshold of R = 2.


M. tuberculosis 
GeneMarkS and EasyGene are comparable, although GeneMarkS seems to over-predict slightly (assuming that the 3918 annotated genes are close to being correct), and Easygene might under-predict. We believe that Frame predicts too many genes in this organism and at the same time it has lower sensitivity than the two others, suggesting a worse performance overall. This indicates that Frame is not very robust with respect to high GC content.
H. pylori 
B. subtilis 
EasyGene comes closest to the number of annotated genes and have higher sensitivity than the other methods.

Conclusions
The emerging overall picture is that the sensitivity of EasyGene tends to be comparable to GeneMarkS and higher than Frame. With regards to specificity, EasyGene and Frame tend to be comparable and both higher than GeneMarkS. Hence, EasyGene comes out with the best combined sensitivity/specificity performance. When it comes to exact starts, EasyGene also generally performs best.
Glimmer and Orpheus have good sensitivities but at the cost of very low specificities in this comparison. We have lowered the ORF length cutoff from their default values in these methods to make the results comparable. This may be unfair, but since the challenge is to find the short genes, we believe that any gene finder should be able to score them.
At present it is not possible to automatically find all genes in a prokaryotic genome. We believe the aim of a gene finding system is to help expert annotators as much as possible, and we consider the statistical significance of a gene an important help in classifying the predictions into almost certain genes and border-line genes needing more attention. Contrary to most other gene finders discussed here, it is up to the user which significance cut-off to use. EasyGene also predicts sub-optimal start codons if need be, so it will be easy to see if e.g. two alternative starts have almost the same score.
R
-value for ORFs longer than say 500 bp. Genes of this length ought to have high log-odds values. If they do not – i.e. if they score below 0 – then they are probably not real genes despite their length (sometimes very long non-coding ORFs occur in regions of repetitive DNA).
If the amount of available genomic DNA is very small (as it may be in partially sequenced genomes) the 3 branches of 4th order coding models may have too many parameters to be reliably estimated. In such cases, one could reduce the parameter space simply by using fewer branches and/or lower orders. More generally, one could develop a method for automatic fine-tuning of HMM architecture for every new organism. Other lines of future research could focus on modelling of genes with errors and frame shifts.
S. typhi 
31
].

Appendix: The length dependent score distribution
z 
M 
may be written as


c
1
c
l 

P 
l
M
) is the length distribution of the HMM. In logarithmic form we have


P 
z
N 
), may be rewritten in exactly the same way, so the entire log-odds score becomes


where


We will now look at the distribution of each of these terms.
The null model consists of a state with a loop and three reverse codon states with a loop. For a long sequence one of the loops will usually dominate the probability, so the length distribution is well approximated by a geometric distribution
P
l
N

k
1 
k
1
l
)
k
1 
is a constant greater than zero.
17
],


p 
n 
n 
l
0 
variable 
l
l 
l
0 
l


n 
l
n
n
, we obtain


Q
Q 
N 
l

l
.
p
M
p
N
) will almost cancel in the last term of equation 6, except from the contribution from the RBS model and the states after the stop codon. This contribution will be independent of the ORF length. Since it is again a sum of random terms it is well approximated by a normal distribution.
l
. Therefore


l
:
μ
μ
l'
     (11)


9
l
l 
in the formulas by changing the constants.)
standard score 
Γ, defined in equation 2, which is normally distributed with average 0 and variation 1.
l 
scoring more than Γ in a sequence is
C
l
A 
Bl
') [1 - Φ(Γ)],     (13)
l
' and Φ is the cumulative normal distribution. Thus, for a given score we can calculate the number of expected predictions in a random sequence.
l 
l
C 

C 
predictions be made at any length, the total number of predictions in a random genome is


l
s 

l
C 

is given by



, but using the real expression introduces only an insignificant error. Inserting into equation 14 finally yields equation 4,
R 
A 
C
B 
l
s 

l
0
C 
C
B
)).     (16)

Web sites used
Frame-by-Frame:


GeneMark.hmm 2.1:


GeneMark.hmm 2.1 using GeneMarkS models:


GeneMark 2.4:




Acknowledgements

 for providing the Glimmer package. This work was supported by a grant from the Danish National Research Foundation.


Frishman
D

Mironov
A

Mewes
HW

Gelfand
M


Combining diverse evidence for gene recognition in completely sequenced bacterial genomes
Nucleic Acids Research
1998
26
2941
2947
9611239
10.1093/nar/26.12.2941


Skovgaard
M

Jensen
LJ

Brunak
S

Ussery
D

Krogh
A


On the total number of genes and their length distribution in complete microbial genomes
Trends in Genetics
2001
17
425
428
11485798
10.1016/S0168-9525(01)02372-1


Kawarabayasi
Y



Complete genome sequence of an aerobic hyperthermophilic crenarchaeon
Aeropyrum pernix K1 DNA Res
1999
6
83
101


Fickett
J


Recognition of protein coding regions in DNA sequences
Nucleic Acids Research
1982
17
5303
5318
7145702


Gribskov
M

Devereux
J

Burgess
R


The codon preference plot: Graphic analysis of protein coding sequences and prediction of gene expression
Nucleic Acids Research
1984
12
539
549
6694906


Staden
R


Measurements of the effects that coding for a protein has on a dna sequence and their use in finding genes
Nucleic Acids Research
1984
12
551
567
6364041


Borodovsky
M

McIninch
J


GENMARK: Parallel gene recognition for both DNA strands
Computers and Chemistry
1993
17
123
133
10.1016/0097-8485(93)85004-V


Krogh
A

Mian
IS

Haussler
D


E. coli 
DNA
Nucleic Acids Research
1994
22
4768
4778
7984429


Salzberg
SL

Delcher
AL

Kasif
S

White
O


Microbial gene identification using interpolated Markov models
Nucleic Acids Research
1998
26
544
548
9421513
10.1093/nar/26.2.544


Lukashin
AV

Borodovsky
M


GeneMark.hmm: new solutions for gene finding
Nucleic Acids Research
1998
26
1107
1115
9461475
10.1093/nar/26.4.1107


Besemer
J

Lomsadze
A

Borodovsky
M


GeneMarkS: a self-training method for prediction of gene starts in microbial genomes. implications for finding sequence motifs in regulatory regions
Nucleic Acids Research
2001
29
2607
2618
11410670
10.1093/nar/29.12.2607


Besemer
J

Borodovsky
M


Heuristic approach to deriving models for gene finding
Nucleic Acids Research
1999
27
3911
3920
10481031
10.1093/nar/27.19.3911


Shmatkov
AM

Melikyan
AA

Chernousko
FL

Borodovsky
M


Finding prokaryotic genes by the 'frame-by-frame' algorithm: targeting gene starts and overlapping genes
Bioinformatics
1999
15
874
886
10743554
10.1093/bioinformatics/15.11.874


Bairoch
A

Apweiler
R


The SWISS-PROT protein sequence database and its supplement TrEMBL in 2000
Nucleic Acids Research
2000
28
45
48
10592178
10.1093/nar/28.1.45


Altschul
SF

Madden
TL

Schaffer
AA

Zhang
J

Zhang
Z

Miller
W

Lipman
DJ


Gapped BLAST and PSI-BLAST: a new generation of protein database search programs
Nucleic Acids Research
1997
25
3389
3402
9254694
10.1093/nar/25.17.3389


Hobohm
U

Scharf
M

Schneider
R

Sander
C


Selection of representative protein data sets
Protein Science
1992
1
409
417
1304348


Durbin
RM

Eddy
SR

Krogh
A

Mitchison
G


Biological Sequence Analysis Cambridge University Press, Cambridge, UK
1998


Krogh
A


Salzberg SL, Searls DB, Kasif S


An introduction to hidden Markov models for biological sequences
In Computational Methods in Molecular Biology
1998
4
Elsevier, Amsterdam
45
63


Rabiner
LR


A tutorial on hidden Markov models and selected applications in speech recognition
Proc IEEE
1989
77
257
286
10.1109/5.18626


Krogh
A


Gaasterland T, Karp P, Karplus K, Ouzounis C, Sander C, Valencia A


Two methods for improving performance of a HMM and their application for gene finding
In Proceedings of the Fifth International Conference on Intelligent Systems for Molecular Biology
1997
Menlo Park, CA AAAI Press
179
186


Yada
T

Totoki
Y

Takagi
T

Nakai
K


A novel bacterial gene-finding system with improved accuracy in locating start codons
DNA Research
2001
8
97
106
11475327


Medigue
C

Rouxel
T

Vigier
P

Henaut
A

Danchin
A


Evidence for horizontal gene transfer in Escherichia coli speciation
Journal of Molecular Biology
1991
222
851
856
1762151


Hughey
R

Krogh
A


Hidden Markov models for sequence analysis: extension and analysis of the basic method
CABIOS
1996
12
95
107
8744772


Stormo
GD

Haussler
D


Optimally parsing a sequence into different classes based on multiple types of evidence
In Proc of Second Int Conf on Intelligent Systems for Molecular Biology
1994
369
375


Suzek
BE

Ermolaeva
MD

Schreiber
M

Salzberg
SL


A probabilistic method for identifying start codons in bacterial genomes
Bioinformatics
2001
17
1123
1130
11751220
10.1093/bioinformatics/17.12.1123


Link
AJ

Robison
K

Church
GM


Comparing the predicted and observed properties of proteins encoded in the genome of escherichia coli k-12
Electrophoresis
1997
18
1259
1313
9298646


Hannenhalli
SS

Hayes
WS

Hatzigeorgiou
AG

Fickett
JW


Bacterial start site prediction
Nucleic Acids Research
1999
27
3577
3582
10446249
10.1093/nar/27.17.3577


Cole
ST



Mycobacterium tuberculosis 
from the complete genome sequence
Nature
1998
393
537
544
9634230
10.1038/31159


RA
Alm



Genomic-sequence comparison of two unrelated isolates of the human gastric pathogen helicobacter pylori
Nature
1999
397
176
180
9923682
10.1038/16495


Kunst
F



The complete genome sequence of the gram-positive bacterium bacillus subtilis
Nature
1997
390
249
256
9384377
10.1038/36786


Parkhill
J



Complete genome sequence of a multiple drug resistant salmonella enterica serovar typhi ct18
Nature
2001
413
848
852
11677608
10.1038/35101607





