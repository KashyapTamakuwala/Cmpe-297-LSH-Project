Molecular Systems Biology 3; Article number 88; doi:10.1038/msb4100129 Citation: Molecular Systems Biology 3:88 & 2007 EMBO and Nature Publishing Group All rights reserved 1744-4292/07 www.molecularsystemsbiology.com

REVIEW

Network-based prediction of protein function
Roded Sharan1, Igor Ulitsky1 and Ron Shamir*
School of Computer Science, Tel Aviv University, Tel Aviv, Israel * Corresponding author. School of Computer Science, Tel Aviv University, Tel Aviv 69978, Israel. Tel.: þ 972 3 6405383; Fax: þ 972 3 6405384; E-mail: rshamir@tau.ac.il 1 These authors contributed equally to this work.
Received 20.9.06; accepted 9.1.07

Functional annotation of proteins is a fundamental problem in the post-genomic era. The recent availability of protein interaction networks for many model species has spurred on the development of computational methods for interpreting such data in order to elucidate protein function. In this review, we describe the current computational approaches for the task, including direct methods, which propagate functional information through the network, and module-assisted methods, which infer functional modules within the network and use those for the annotation task. Although a broad variety of interesting approaches has been developed, further progress in the field will depend on systematic evaluation of the methods and their dissemination in the biological community. Molecular Systems Biology 13 March 2007; doi:10.1038/msb4100129
Subject Categories: computational methods; proteins Keywords: data integration; function prediction; protein interaction networks; protein modules

networks, with nodes representing proteins and edges representing the detected PPIs. In this review, we survey the growing body of works on functional annotation of proteins via their network of interactions (summarized in Table I). We distinguish two types of approaches (Figure 2): direct annotation schemes, which infer the function of a protein based on its connections in the network, and module-assisted schemes, which first identify modules of related proteins and then annotate each module based on the known functions of its members. Naturally, the presented methods and the emphasis on particular ones reflect the opinions of the authors.

Direct methods
The common principle underlying all direct methods for functional annotation is that proteins that lie closer to one another in the PPI network are more likely to have similar function. As can be seen in Figure 3, there is an evident correlation between network distance and functional distance, that is, the closer the two proteins are in the network the more similar are their functional annotations. The methods described below differ in the way they capture and exploit this correlation. In the following, we denote the PPI network as a graph G¼(V,E) (see Box 1 for graph-theoretic definitions).

Neighborhood counting
The simplest and most direct method for function prediction determines the function of a protein based on the known function of proteins lying in its immediate neighborhood. Schwikowski et al (2000) predict for a given protein up to three functions that are most common among its neighbors. Although simple and effective, the obvious caveats of this approach are that associations are not assigned any significance values and the full topology of the network is not taken into account in the annotation process. Hishigaki et al (2001) try to tackle the first problem by computing w2-like scores for function assignment. In detail, they examine the n-neighborhood of a protein (Box 1). For a protein p, each function f is assigned a score (nf -ef)2/ef, where nf is the number of proteins in the n-neighborhood of p that have the function f and ef is the expectation of this number based on the frequency of f among the network's proteins. A shortcoming of this approach is that within the n-neighborhood, proteins at different distances from p are treated in the same way. Chua et al (2006) try to tackle the second problem by investigating the relation between network distance and functional similarity. They focus on the 1- and 2-neighborhoods of a protein, and devise a functional similarity score that gives different weights to proteins according to their distances from the target protein.
Molecular Systems Biology 2007 1

Introduction
The past decade has seen a revolution in sequencing technologies, resulting in hundreds of sequenced genomes. A fundamental challenge of the post-genomic era is the interpretation of this wealth of data to elucidate protein function. To date, even for the most well-studied organisms such as yeast, about one-fourth of the proteins remain uncharacterized (Figure 1). Classical computational approaches to gene annotation collect for each protein a set of features characterizing it, and apply machine-learning algorithms to infer annotation rules based on those features (Pavlidis et al, 2001). The newly available large-scale networks of molecular interactions within the cell have made it possible to go beyond these onedimensional approaches, and study protein function in the context of a network. In particular, novel high-throughput technologies for protein­protein interaction (PPI) measurements (Aebersold and Mann, 2003; Fields, 2005) have created large-scale data on protein interaction across human and most model species. These data are commonly represented as & 2007 EMBO and Nature Publishing Group

Network-based function prediction R Sharan et al

Figure 1 Extent of annotation of proteins in model species. For each species, the charts give the fractions and numbers of annotated and unannotated proteins, according to the three ontologies of the GO annotation. The numbers are based on the Entrez Gene and the WormBase databases as of September 2006.

Graph theoretic methods
As the PPI network is a graph, it is natural to apply graph algorithms for its functional analysis. Two main approaches have been suggested in this context: cut-based approaches and a flow-based algorithm. In contrast to the local neighborhood counting methods, these approaches are global and take into account the full topology of the network. Vazquez et al (2003) aim at assigning a function sv to each unannotated protein v so as to maximize the number of edges that connect proteins (unannotated or previously annotated) assigned with the same function. Precisely, they try to maximize X X dðsu ; sv Þ þ hv ðsv Þ
ðu;vÞ2E0 v2V

where E0 is the set of edges incident on two unannotated proteins, d is a function that equals 1 if x¼y and 0 otherwise, and hv(f) denotes the number of neighbors of v previously annotated with function f. The first term in the optimization criterion concerns unannotated proteins, whereas the second term accounts for interactions between unannotated and previously annotated proteins. This optimization problem, which generalizes the computationally hard problem of minimum multiway cut (Box 1) (Dahlhaus et al, 1994), is heuristically solved using simulated annealing. Karaoz et al (2004) use a similar approach but handle one function at a time. Each annotated protein v receives a state sv that equals þ 1 if v has the function in question and equals À1 otherwise. Next, an assignment of À1 and þ 1 states to P unannotated proteins is sought so as to maximize su sv.
ðu;vÞ2E

cut problem, where the goal is to assign a unique function to all unannotated proteins so as to minimize the cost of edges connecting proteins with different assignments. They propose an integer programming reformulation of this problem, which allows them to solve the problem in practice (on the yeast PPI network) by applying a commercial solver (CPLEX). Finally, Nabieva et al (2005) also suggest a flow-based (Box 1) approach for the annotation problem. As they note that the maximum-cut-based approaches described above take into account global properties of the network but do not reward local proximity, they propose a novel method that aims at considering both local and global effects. They handle one function at a time. The basic idea is to treat each protein annotated with the function as the source of a `functional flow'. After simulating the spread over time of this functional flow through the network, each unannotated protein is assigned a score for having the function based on the amount of flow it received during the simulation.

Markov random field
A number of probabilistic approaches to the annotation problem have been suggested, all relying on a Markovian assumption: the function of a protein is independent of all other proteins given the functions of its immediate neighbors. This assumption gives rise to a Markov random field (MRF) model (Box 2), initially proposed by Deng et al (2003). Deng et al (2003) devise an MRF model in which the probability that a protein v is assigned with a certain function that occurs with frequency f is a logistic function of logðf =1 À f Þ þ bNðv; 1Þþ aðNðv; 1Þ À Nðv; 0ÞÞ À Nðv; 0Þ, where a and b are model parameters and N(v,1) and N(v,0) are the numbers of neighbors of v that are assigned or not assigned with the function, respectively. The parameters a and b of the model are first estimated using a quasi-likelihood method, and then Gibbs sampling is used for inferring the functions of unannotated proteins. Interestingly, as pointed out by Deng et al (2004), setting a to 0 and b to 1 yields the exact optimization criterion used by Karaoz et al (2004). & 2007 EMBO and Nature Publishing Group

The advantage of this formulation is that a partition of the vertices into two sets only is sought. To find a good partition, Karaoz et al (2004) apply a local search procedure in which for every vertex in turn (until convergence), the state of the vertex is changed according to the majority of the states of its neighbors. This procedure guarantees a solution with value at least half of the optimum. A related method suggested by Nabieva et al (2005) again formulates the annotation problem as a minimum multiway
2 Molecular Systems Biology 2007

Network-based function prediction R Sharan et al

Table I A summary of functional annotation methods
Direct Neighborhood based Schwikowski et al (2000) Hishigaki et al (2001) Chua et al (2006) Vazquez et al (2003) Karaoz et al (2004) Nabieva et al (2005) Probabilistic Integrating multiple data sources Deng et al (2003) Letovsky and Kasif (2003) Joshi et al (2004) Deng et al (2004) Lee et al (2006) Lanckriet et al (2004) Tsuda et al (2005)

Graph theoretic

Letovsky and Kasif (2003) also use an MRF model. Their main assumption is that the number of neighbors of a protein that are annotated with a given term is binomially distributed, where the distribution's parameter depends on whether the protein has that function or not. They employ loopy belief propagation (Murphy et al, 1999) to perform inference in their model.

Integrating multiple information sources
Several authors have integrated data from multiple sources for the annotation task. The approaches differ in the way the sources are combined. The simplest approach treats each data source independently. Such an approach for function prediction was first introduced by Marcotte et al (1999) in a different context. Joshi et al (2004) integrated PPIs, genetic interactions and coexpression interactions. For each interaction type they estimated the a priori probability of functional association given an interaction of this type. By treating all interactions (withinand between-types) as independent of one another, they combined them into a single reliability score for the functional association of a protein given the annotations of its neighbors. A second approach for combining multiple data types constructs a joint probabilistic model or a prediction function of the different types. Deng et al (2004) generalized their earlier MRF approach to allow using multiple networks in the annotation process, and applied the method to annotate yeast proteins using both PPIs and genetic interactions (Deng et al, 2004; Lee et al, 2006). Lanckriet et al (2004) and later Tsuda et al (2005) represent each data type using a matrix of kernel similarity values. These matrices are then combined by learning optimal relative weights for the different kernels.

Module-assisted Based solely on topology General methods

Bader and Hogue (2003) Altaf-Ul-Amin et al (2006) Sharan et al (2005)

Hierarchical clustering-based

Arnau et al (2005) Rives and Galitski (2003) Maciag et al (2006) Brun et al (2003) Samanta and Liang (2003)

Graph clusteringbased

Spirin and Mirny (2003) King et al (2004) Pereira-Leal et al (2004) Przulj et al (2004) Dunn et al (2005) Bu et al (2003) Enright et al (2002) Adamcsek et al (2006)

Expanding seed complex

Asthana et al (2004) Bader (2003) Wu and Hu (2005)

Module-assisted methods
The prevalence of the modularity paradigm in molecular cell biology has led to an extensive use of modules in prediction of molecular functions. By functional module one typically means a group of cellular components and their interactions that can be attributed to a specific biological function (Hartwell et al, 1999). Instead of predicting functions for individual genes, a module-assisted approach attempts to first identify coherent groups of genes and then assign functions to all the genes in each group. The module-assisted methods differ mainly in their module detection technique. Once a module is obtained, simple methods are usually used for function prediction within the module. For example, every function shared by the majority of the module's genes is assigned to all the genes in the module. Alternatively, a hypergeometric enrichment P-value is computed for every function:    f nÀf m X i mÀi   p¼ n i¼k m where n is the number of nodes in the PPI network, f is the number of genes in the network annotated with the function and m is the module size. The functions enriched within the module (i.e. obtaining P-value below some threshold) are then predicted for all the genes in the module.
Molecular Systems Biology 2007 3

Integrating gene expression data Networks active in a specific condition

Balazsi et al (2005) de Lichtenberg et al (2005) Luscombe et al (2004) Wachi et al (2005) Jansen et al (2002) Simonis et al (2004) Tornow and Mewes (2003) Zien et al (2000) Ideker et al (2002) Hanisch et al (2002) Cabusora et al (2005) Segal et al (2003)

Expression analysis of known pathways

Joint module identification

Integrating diverse genomic data Genetic interactions Phenotypic profiles Heterogeneous data sources

Kelley and Ideker (2005) Haugen et al (2004) Tanay et al (2004) Tanay et al (2005)

The last column represents the attributes of the corresponding algorithm: An implementation of the algorithm with a graphical user interface is available The algorithm uses interaction weights based on confidence levels For module-assisted methods: the method can naturally produce overlapping modules.

& 2007 EMBO and Nature Publishing Group

Network-based function prediction R Sharan et al

Figure 2 Direct versus module-assisted approaches for functional annotation. The scheme shows a network in which the functions of some proteins are known (top), where each function is indicated by a different color. Unannotated proteins are in white. In the direct methods (left), these proteins are assigned a color that is unusually prevalent among their neighbors. The direction of the edges indicates the influence of the annotated proteins on the unannotated ones. In the module-assisted methods (right), modules are first identified based on their density. Then, within each module, unannotated proteins are assigned a function that is unusually prevalent in the module. In both methods, proteins may be assigned with several functions.

2002; Yeang et al, 2005; Scott et al, 2006). Here, we focus on the former, as the latter methods are currently not aimed at function prediction.

Detecting functional modules from network topology
Several works focused on the detection of functional modules based solely on protein interaction data. Most of the works described below decompose the PPI network into subnetworks based on some topological properties. The molecular complex detection algorithm (MCODE) (Bader and Hogue, 2003) consists of three stages: vertex weighting, complex prediction and an optional post-processing step. The weighting of nodes is based on the core clustering coefficient (Box 1). Bader and Hogue (2003) propose the use of this coefficient instead of the standard clustering coefficient, as it increases the weights of heavily interconnected graph regions while giving small weights to the less connected vertices, which are abundant in the scale-free protein interaction networks. Once the weights are computed, the algorithm traverses the weighted graph in a greedy fashion to isolate densely connected regions. The post-processing step filters or adds proteins based on connectivity criteria. MCODE has been used in several recent publications describing & 2007 EMBO and Nature Publishing Group

Figure 3 Correlation between protein functional distance and network distance. X-axis: distance in the network. Y-axis: average functional similarity of protein pairs that lie at the specified distance. The functional similarity of two proteins is measured using the semantic similarity of their GO categories (Lord et al, 2003).

Module finding algorithms can be divided into methods using solely network topology information and methods that utilize addition data sources, such as gene expression measurements or deletion phenotypes. The algorithms vary in their ability to detect overlapping modules and in the use of interaction reliabilities. The exact definition of a functional module also varies. The purpose of some algorithms is the detection of molecular complexes, but others can also detect sparser structures, such as signaling pathways (Steffen et al,
4 Molecular Systems Biology 2007

Network-based function prediction R Sharan et al

Box 1 Graph-theoretic concepts A graph is a pair G¼(V,E), where V is a set of vertices (or nodes) and E is a set of edges connecting pairs of vertices. In PPI networks, the vertices represent proteins and the edges represent interactions. The distance between two vertices in a graph is the number of edges on a shortest path between them. The diameter of a graph is the maximum distance between any two of its vertices. The neighborhood of a vertex is the set of vertices connected to it. The n-neighborhood of a vertex is the set of vertices whose distance from it is at most n. A clique in a graph is a fully connected subgraph, that is, a subgraph in which every two vertices are connected by an edge. The degree of a vertex is the number of its neighbors. A cut in a graph is a partition of the vertices into two non-overlapping sets. A multiway cut is a partition of the vertices into several disjoint sets. The value of the cut is the number of edges going between different sets. Network flow: Imagine a graph as a network of interconnected pipes. Suppose water gets into one or more vertices (sources) from the outside, and can exit the network at certain other vertices (sinks). Then, it will spread in the pipes and reach other nodes, until it exits at sinks. The capacities of the edges (i.e., how much the pipe can carry per unit time) and the input at the sources determine the amount of flow along every edge (i.e., how much each pipe actually carries) and the amount exiting at each sink. In the context of a PPI network, by considering proteins that have a certain function as sources and simulating flow in the network, the amount of flow at edges and sinks can be used to annotate additional proteins. The density of a graph is the fraction of edges it actually has out of all possible vertex pairs. Hence, the density of G¼(V,E) is 2|E|/(|V|(|V|À1)), and a clique graph has the maximum possible density, that is, 1. The clustering coefficient of a vertex is the density of its neighborhood (Watts and Strogatz, 1998). A graph is called a k-core if the minimal degree in it is k. Core clustering coefficient: For a parameter k, the core clustering coefficient of a vertex is the density of the largest k-core of its immediate neighborhood (Bader and Hogue, 2003). An adjacency matrix of a graph G¼(V,E) is a matrix AjVjÂjVj ¼ faij g where aij¼1 if and only if vi and vj are neighbors. As PPI networks usually do not contain loops, in our context aii¼0. A graph is called bipartite if its vertices can be partitioned into two disjoint sets such that no edge connects two vertices of the same set.

A greedy network search algorithm is subsequently used for the detection of high-scoring modules. The method can be generalized to identify modules that are conserved over several networks.

Hierarchical clustering-based methods
Several works described the use of hierarchical clustering for module detection. A key decision in the use of this approach is the selection of the similarity measure between protein pairs. An intuitive similarity metric is based on pairwise distances (Box 1) between proteins in the network. One of the problems in using it in a hierarchical clustering setting is that the distances between many protein pairs are identical (the ties in proximity problem) (Arnau et al, 2005). Rives and Galitski (2003) postulated that module members are likely to have similar shortest path distance profiles. They therefore used hierarchical clustering on the all-pair shortest path distances matrix and outlined modules by manual inspection. Although such an approach is impractical for genome-scale networks, it has been successfully applied to focused subnetworks, such as the network of interactions between nuclear proteins and a regulatory network of filamentation in Saccharomyces cerevisiae (Rives and Galitski, 2003). A more sophisticated version of this approach was recently applied to the gene expression machinery network (Maciag et al, 2006). The authors used a special weighted form of mutual clustering coefficient (Goldberg and Roth, 2003) for quantifying similarities between proteins, and a modified version of the k-means algorithm (Hartigan, 1975) was used for cluster detection. Arnau et al (2005) used the shortest path length between proteins as a distance measure and attempted to overcome the `ties in proximity' problem by obtaining multiple, equally valid hierarchical clustering solutions with a random choice when ties are encountered. The fraction of the solutions in which the protein pair was clustered together was then used as a similarity measure for clustering using standard hierarchical algorithms. Additional similarity measures proposed for using in a hierarchical clustering setting include Czekanovski­Dice distance (Brun et al, 2003) and the statistical significance of the number of common interaction partners (Samanta and Liang, 2003).

mapping of large-scale interaction networks (LaCount et al, 2005; Rual et al, 2005). It is available as a plug-in for the Cytoscape network visualization software (Shannon et al, 2003). Altaf-Ul-Amin et al (2006) use a similar approach: they define a cluster property of a node n with respect to a cluster C as the number of edges between n and the nodes of C divided by that number averaged over the nodes of C. Starting from single nodes, clusters are gradually grown as long as the cluster property of the added nodes and the density of the cluster both exceed a certain threshold. Sharan et al (2005) proposed the NetworkBlast algorithm for detecting protein modules in protein interaction networks. Each candidate set of proteins is assigned a likelihood ratio score that measures its fit to a protein complex model versus the chance that its connections arise at random (Box 3). & 2007 EMBO and Nature Publishing Group

Graph clustering methods
Numerous graph-clustering algorithms have been applied to the graph representing the binary interactions. Spirin and Mirny (2003) proposed two such algorithms. The first algorithm is based on superparamagnetic clustering (SPC) (Blatt et al, 1996) and the second is a Monte Carlo algorithm maximizing the density of the obtained clusters. Both algorithms require the size of the sought clusters as input. The SPC algorithm is specifically shown to perform well in detecting dense structures loosely connected to other areas of the network. In addition to detecting protein complexes, Spirin and Mirny (2003) also show that their method is capable of detecting sparsely connected functional modules, such as the MAPK signaling cascade.
Molecular Systems Biology 2007 5

Network-based function prediction R Sharan et al

Box 2 Function prediction using the MRF method The Markov random field (MRF) model provides a probabilistic framework for simulating the mutual influence of random variables via a neighborhood system. Given a network of influence, the state of any random variable is assumed to be independent of all other random variable states given those of its immediate neighbors. In the function prediction setting, each random variable corresponds to a protein, and its states correspond to certain functional annotations. The joint distribution of the random variables can be shown to factorize over the cliques (Box 1) of the network (Besag, 1974). That is, the probability of a certain assignment of discrete states x¼(x1,y,xN) is ( ) X 1 1 exp fÀHðxÞg ¼ exp À Hc ðxc Þ Z Z c2C

pðxÞ ¼

where N is the total number of variables, Z is a normalizing constant, C is the set of all cliques in the network, Hc is a potential function associated with clique c and xc is the assignment of states to the members of c. Inference in this general model is computationally hard, hence it is common to assign 0 potentials to all cliques of size greater than 2, and further homogenize the model by associating the same potential function with all cliques of the same size. For such a homogeneous second-order MRF, we have HðxÞ ¼ X
v2V

H1 ðxfvg Þ þ

X
ðu;vÞ2E

H2 ðxfu;vg Þ

Deng et al (2003) treat one function at a time. To obtain a second-order MRF model, they assume that the probability of a 0/1 annotation over the entire network is proportional to exp(aN01+bN11+N00), where a,b are parameters for weighting the contributions of the different terms and Nij is the number of interacting pairs with assignment i,j (unordered). Combining the a priori probability of an assignment with N1 1 s, which depends on the frequency f of the function and is proportional to ðf=ð1 À fÞÞN1 , they obtain a homogeneous second-order MRF for which  HðxÞ ¼ À log X X X X f xfvg À b xfug xfvg À a ½xfug ð1 À xfvg Þ þ xfvg ð1 À xfug Þ À ð1 À xfug Þð1 À xfvg Þ 1 À f v2V ðu;vÞ2E ðu;vÞ2E ðu;vÞ2E

Hence, the probability that protein v is assigned with the function given the annotations of its neighbors N(v) is  Pðxfvg ¼ 1jxNðvÞ Þ ¼ logit log f þ bNðv; 1Þ þ aðNðv; 1Þ À Nðv; 0ÞÞ À Nðv; 0Þ 1Àf 

where N(v,i) is the number of neighbors of v that are assigned with iA{0,1} and logit is the logistic function logit(x)¼1/(1+eÀx). Deng et al (2003) estimate the two parameters of the model using a quasi-likelihood method and apply Gibbs sampling to infer the unknown functional annotations.

Przulj et al (2004) used the highly connected subgraphs (HCS) algorithm (Hartuv and Shamir, 2000) to determine complexes in PPI data. A highly connected subgraph is defined as a subgraph with n nodes such that more than n/2 edges must be removed in order to disconnect it. It can be shown that this property ensures that the diameter of the subgraph (Box 1) is at most two, and that it is at least half as dense as a clique of the same size. The HCS algorithm finds a minimum cut (Box 1) in the graph and uses it to partition the graph. This process is repeated recursively until highly connected components are reached. The restricted neighborhood search clustering (RNSC) algorithm proposed by King et al (2004) partitions the node set of the network into clusters based on a cost function that is used to evaluate the partitioning. The algorithm starts with a random cluster assignment and proceeds by reassigning nodes, so as to maximize the partition's score. In addition, a tabu list is maintained to avoid cycling back to previously explored partitions. Finally, the clusters are filtered based on their size, density and functional homogeneity. The Markov clustering (MCL) algorithm (Enright et al, 2002) has been recently proposed for complex detection in PPI data
6 Molecular Systems Biology 2007

(Krogan et al, 2006). The algorithm simulates flow on the PPI graph by constructing its adjacency matrix (Box 1) and computing its successive powers to increase the contrast between regions with high flow and regions with a low flow. This process can be shown to converge towards a partition of the graph into high-flow regions corresponding to protein complexes, separated by regions of no flow. Additional graph clustering techniques applied include clique percolation (Adamcsek et al, 2006), graph flow simulation (Pereira-Leal et al, 2004), edge-betweenness clustering (Dunn et al, 2005) and spectral methods (Bu et al, 2003).

Expansion of complex seeds
In contrast to finding complexes de novo in the protein interaction network, several works attempted prediction of new members for partially known protein complexes. The Complexpander software (Asthana et al, 2004) receives a particular `core' set of proteins and produces a list of candidate proteins, ranked by the probability of membership in the complex. This approach approximates the probability that a & 2007 EMBO and Nature Publishing Group

Network-based function prediction R Sharan et al

Box 3 Detecting dense subgraphs using maximum likelihood scoring Maximum likelihood-based scoring has been used for detecting molecular complexes in NetworkBlast (Sharan et al, 2005) and for integration of heterogeneous data through biclustering in SAMBA (Tanay et al, 2002, 2004, 2005). For a given subnetwork H, this technique compares the probabilities of two alternatives: (i) H has dense structure (the subnetwork model) and (ii) H is random (null model). When assigning a score to a complex, in the subnetwork model, every possible interaction in the subnetwork exists with some high probability b, independently of other protein pairs. In the null model, every two proteins u,v are connected with probability pu,v that depends on their degrees. pu,v can be estimated by generating a collection of random networks preserving the degree of every protein and calculating the fraction of networks in which an interaction between u and v exists. The log-likelihood ratio of the two alternatives for a set of proteins C with a set of interactions E(C) is thus X
ðu;vÞ2EðCÞ

given protein seed, in a network without edge reliabilities. The algorithm first identifies a `core' by a heuristic search for a maximum clique containing the seed, and then expands it through a breadth-first-search graph traversal (Cormen et al, 1990) with additional vertices, such that it will meet a certain `community' criterion.

Integrated analysis of interactions and expression profiles
Several studies have integrated PPI data with diverse additional sources to infer modular structures. These modular structures can serve as potent function predictors, and also shed light on the interplay between the different sources of information. Microarray technologies (Schena et al, 1995), which measure expression levels on a genome-wide scale, are currently the largest source of high-throughput genomic information. A natural question is the relation between transcription pattern similarity of a pair of genes and the existence of a protein interaction between their products. As shown in both simple and complex organisms (Ge et al, 2001; Hahn et al, 2005), genes of interacting proteins tend to share similar expression patterns. Following this observation, the use of both information sources together for analysis of functional modules has been an appealing concept adopted by many research groups. One line of works proposed a two-step approach: extraction of a group of genes that are highly expressed in a certain condition, and then analysis of the topological properties of PPI networks induced by these genes (Luscombe et al, 2004; Balazsi et al, 2005; de Lichtenberg et al, 2005; Wachi et al, 2005). Other works used the reverse approach by analyzing the expression coherence of known pathways or complexes (Zien et al, 2000; Jansen et al, 2002; Tornow and Mewes, 2003; Si